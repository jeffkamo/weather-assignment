{"version":3,"sources":["Forecast.js","App.js","index.js"],"names":["Forecast","datetime","temp","icon","description","date","Date","toString","split","day","month","Math","floor","className","getDate","src","alt","height","width","WEATHER_API","App","useState","city","setCity","today","setToday","forecasts","setForecasts","useEffect","a","async","fetch","response","json","data","list","main","length","interval","reducer","accu","curr","index","push","reduce","init","name","map","weather","dt_txt","dt","key","ReactDOM","render","document","getElementById"],"mappings":"2RAkCeA,MA/Bf,YAA0D,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAClCC,EAAO,IAAIC,KAAKL,GADiC,EAElCI,EAAKE,WAAWC,MAAM,KAFY,mBAEhDC,EAFgD,KAE3CC,EAF2C,KAMvD,OAFAR,EAAOS,KAAKC,MAAMV,GAGhB,6BAASW,UAAU,YACjB,wBAAIA,UAAU,kBACZ,0BAAMA,UAAU,iBAAiBJ,GACjC,0BAAMI,UAAU,uBACbH,EADH,IACWL,EAAKS,YAIlB,yBACED,UAAU,yBACVE,IAAG,2CAAsCZ,EAAtC,WACHa,IAAKZ,EACLa,OAAO,MACPC,MAAM,QAGR,2BACE,0BAAML,UAAU,mBAAhB,eACA,0BAAMA,UAAU,kBAAkBX,EAAlC,WCrBFiB,EAAW,kDAJD,WAIC,eAHD,UAGC,kBAFD,mCAEC,kBADJ,UA6EEC,MA1Ef,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,MAFtB,mBAENG,EAFM,KAECC,EAFD,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAoCb,OA/BAC,qBAAU,YACK,2BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACYE,MAAMZ,IADlB,cACLa,EADK,kBAAAH,EAAA,MAEQG,EAASC,QAFjB,OAELC,EAFK,OAINZ,GACHC,EAAQW,EAAKZ,MAGVE,GAEHC,EAASd,KAAKC,MAAMsB,EAAKC,KAAK,GAAGC,KAAKlC,OAGf,IAArBwB,EAAUW,SACNC,EAAWJ,EAAKC,KAAKE,OAAS,EAC9BE,EAAU,SAACC,EAAMC,EAAMC,GAK3B,QAJAA,EACYJ,IAAa,GACvBE,EAAKG,KAAKF,GAELD,GAEHL,EAAOD,EAAKC,KAAKS,OAAOL,EAAS,IACvCZ,EAAaQ,IAvBJ,qCA2BbU,MAIA,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,mBAAd,YAECS,EACC,8BACE,wBAAIT,UAAU,QAAQS,EAAKwB,MAE3B,6BAASjC,UAAU,SACjB,wBAAIA,UAAU,mBAAd,SACA,uBAAGA,UAAU,eAAeW,EAA5B,SAGF,iCACE,wBAAIX,UAAU,mBAAd,kBAEA,yBAAKA,UAAU,aACZa,EAAUqB,KAAI,gBAAGX,EAAH,EAAGA,KAAMY,EAAT,EAASA,QAASC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,GAA1B,OACb,kBAAC,EAAD,CACEC,IAAKD,EACLjD,SAAUgD,EACV/C,KAAMkC,EAAKlC,KACXC,KAAM6C,EAAQ,GAAG7C,KACjBC,YAAa4C,EAAQ,GAAG5C,oBAOlC,8BACE,6CCvEVgD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9c464bd4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Forecast.css\";\r\n\r\nfunction Forecast({ datetime, temp, icon, description }) {\r\n  const date = new Date(datetime);\r\n  const [day, month] = date.toString().split(\" \");\r\n\r\n  temp = Math.floor(temp);\r\n\r\n  return (\r\n    <article className=\"forecast\">\r\n      <h4 className=\"forecast__date\">\r\n        <span className=\"forecast__day\">{day}</span>\r\n        <span className=\"forecast__month-day\">\r\n          {month} {date.getDate()}\r\n        </span>\r\n      </h4>\r\n\r\n      <img\r\n        className=\"forecast__weather-icon\"\r\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        alt={description}\r\n        height=\"100\"\r\n        width=\"100\"\r\n      />\r\n\r\n      <p>\r\n        <span className=\"visually-hidden\">Temperature</span>\r\n        <span className=\"forecast__temp\">{temp}&deg;</span>\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Forecast;\r\n","import React, { useState, useEffect } from \"react\";\nimport Forecast from \"./Forecast.js\";\n\nconst FEATURE = \"forecast\";\nconst CITY_ID = \"6173331\";\nconst API_KEY = \"209216b63928f0f2398d2bfb876964b1\";\nconst UNIT = \"metric\";\nconst WEATHER_API = `https://api.openweathermap.org/data/2.5/${FEATURE}?id=${CITY_ID}&appid=${API_KEY}&units=${UNIT}`;\n\nfunction App() {\n  const [city, setCity] = useState(null);\n  const [today, setToday] = useState(null);\n  const [forecasts, setForecasts] = useState([]);\n\n  useEffect(() => {\n    const init = async () => {\n      const response = await fetch(WEATHER_API);\n      const data = await response.json();\n\n      if (!city) {\n        setCity(data.city);\n      }\n\n      if (!today) {\n        // I'm assuming that index 2 is the current day's Noon time...\n        setToday(Math.floor(data.list[2].main.temp));\n      }\n\n      if (forecasts.length === 0) {\n        const interval = data.list.length / 5;\n        const reducer = (accu, curr, index) => {\n          index++;\n          if (index % interval === 0) {\n            accu.push(curr);\n          }\n          return accu;\n        };\n        const list = data.list.reduce(reducer, []);\n        setForecasts(list);\n      }\n    };\n\n    init();\n  });\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"visually-hidden\">Forecast</h1>\n\n      {city ? (\n        <main>\n          <h2 className=\"city\">{city.name}</h2>\n\n          <section className=\"today\">\n            <h3 className=\"visually-hidden\">Today</h3>\n            <p className=\"today__temp\">{today}&deg;</p>\n          </section>\n\n          <section>\n            <h3 className=\"visually-hidden\">5-Day Forecast</h3>\n\n            <div className=\"forecasts\">\n              {forecasts.map(({ main, weather, dt_txt, dt }) => (\n                <Forecast\n                  key={dt}\n                  datetime={dt_txt}\n                  temp={main.temp}\n                  icon={weather[0].icon}\n                  description={weather[0].description}\n                />\n              ))}\n            </div>\n          </section>\n        </main>\n      ) : (\n        <main>\n          <h2>Loading...</h2>\n        </main>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}