{"version":3,"sources":["Forecast.js","App.js","index.js"],"names":["Forecast","datetime","temp","icon","description","date","Date","toString","split","day","month","Math","floor","className","getDate","src","alt","height","width","FEATURE","API_KEY","UNIT","COUNTRY_CODE","App","useState","cityName","setCityName","today","setToday","forecasts","setForecasts","WEATHER_API","force","useEffect","a","async","fetch","response","json","data","list","main","length","interval","reducer","accu","curr","index","push","reduce","init","type","name","value","onChange","event","target","map","weather","dt_txt","dt","key","ReactDOM","render","document","getElementById"],"mappings":"2RAkCeA,MA/Bf,YAA0D,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAClCC,EAAO,IAAIC,KAAKL,GADiC,EAElCI,EAAKE,WAAWC,MAAM,KAFY,mBAEhDC,EAFgD,KAE3CC,EAF2C,KAMvD,OAFAR,EAAOS,KAAKC,MAAMV,GAGhB,6BAASW,UAAU,YACjB,wBAAIA,UAAU,kBACZ,0BAAMA,UAAU,iBAAiBJ,GACjC,0BAAMI,UAAU,uBACbH,EADH,IACWL,EAAKS,YAIlB,yBACED,UAAU,yBACVE,IAAG,2CAAsCZ,EAAtC,WACHa,IAAKZ,EACLa,OAAO,MACPC,MAAM,QAGR,2BACE,0BAAML,UAAU,mBAAhB,eACA,0BAAMA,UAAU,kBAAkBX,EAAlC,WCzBFiB,EAAU,WACVC,EAAU,mCACVC,EAAO,SACPC,EAAe,KAoFNC,MAlFf,WAAgB,IAAD,EACmBC,mBAAS,aAD5B,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,MAFtB,mBAENG,EAFM,KAECC,EAFD,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAKPC,EAAW,kDAA8CZ,EAA9C,cAA2DM,EAA3D,YAAuEH,EAAvE,kBAA6FF,EAA7F,kBAA8GC,GAC3HW,GAAQ,EAoCZ,OAlCAC,qBAAU,YACK,6BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACYE,MAAML,IADlB,cACLM,EADK,kBAAAH,EAAA,MAEQG,EAASC,QAFjB,OAELC,EAFK,OAGLC,EAAOD,EAAKC,MAAQ,CAAC,KAAM,KAAM,CAAEC,KAAM,CAAEvC,KAAM,SAEjDA,EAAOS,KAAKC,MAAM4B,EAAK,GAAGC,KAAKvC,SAExByB,GAEXC,EAAS1B,IAGP8B,GAA8B,IAArBH,EAAUa,UACfC,EAAWH,EAAKE,OAAS,EACzBE,EAAU,SAACC,EAAMC,EAAMC,GAK3B,QAJAA,EACYJ,IAAa,GACvBE,EAAKG,KAAKF,GAELD,GAETf,EAAaU,EAAKS,OAAOL,EAAS,MArBzB,sCAyBbM,MASA,yBAAKrC,UAAU,OACb,wBAAIA,UAAU,mBAAd,YAEA,8BACE,wBAAIA,UAAU,QACZ,2BACEA,UAAU,cACVsC,KAAK,OACLC,KAAK,OACLC,MAAO5B,EACP6B,SAhBS,SAAAC,GACjBvB,GAAQ,EACRN,EAAY6B,EAAMC,OAAOH,WAkBrB,6BAASxC,UAAU,SACjB,wBAAIA,UAAU,mBAAd,SACA,uBAAGA,UAAU,eAAec,EAA5B,SAGF,iCACE,wBAAId,UAAU,mBAAd,kBAEA,yBAAKA,UAAU,aACZgB,EAAU4B,KAAI,gBAAGhB,EAAH,EAAGA,KAAMiB,EAAT,EAASA,QAASC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,GAA1B,OACb,kBAAC,EAAD,CACEC,IAAKD,EACL3D,SAAU0D,EACVzD,KAAMuC,EAAKvC,KACXC,KAAMuD,EAAQ,GAAGvD,KACjBC,YAAasD,EAAQ,GAAGtD,sBC3ExC0D,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e76a99bb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Forecast.css\";\r\n\r\nfunction Forecast({ datetime, temp, icon, description }) {\r\n  const date = new Date(datetime);\r\n  const [day, month] = date.toString().split(\" \");\r\n\r\n  temp = Math.floor(temp);\r\n\r\n  return (\r\n    <article className=\"forecast\">\r\n      <h4 className=\"forecast__date\">\r\n        <span className=\"forecast__day\">{day}</span>\r\n        <span className=\"forecast__month-day\">\r\n          {month} {date.getDate()}\r\n        </span>\r\n      </h4>\r\n\r\n      <img\r\n        className=\"forecast__weather-icon\"\r\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        alt={description}\r\n        height=\"100\"\r\n        width=\"100\"\r\n      />\r\n\r\n      <p>\r\n        <span className=\"visually-hidden\">Temperature</span>\r\n        <span className=\"forecast__temp\">{temp}&deg;</span>\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Forecast;\r\n","import React, { useState, useEffect } from \"react\";\nimport Forecast from \"./Forecast.js\";\n\nconst FEATURE = \"forecast\";\nconst API_KEY = \"209216b63928f0f2398d2bfb876964b1\";\nconst UNIT = \"metric\";\nconst COUNTRY_CODE = \"ca\";\n\nfunction App() {\n  const [cityName, setCityName] = useState(\"Vancouver\");\n  const [today, setToday] = useState(null);\n  const [forecasts, setForecasts] = useState([]);\n\n  const WEATHER_API = `https://api.openweathermap.org/data/2.5/${FEATURE}?q=${cityName},${COUNTRY_CODE}&appid=${API_KEY}&units=${UNIT}`;\n  let force = false;\n\n  useEffect(() => {\n    const init = async () => {\n      const response = await fetch(WEATHER_API);\n      const data = await response.json();\n      const list = data.list || [null, null, { main: { temp: null } }];\n\n      const temp = Math.floor(list[2].main.temp);\n\n      if (temp !== today) {\n        // I'm assuming that index 2 is the current day's Noon time...\n        setToday(temp);\n      }\n\n      if (force || forecasts.length === 0) {\n        const interval = list.length / 5;\n        const reducer = (accu, curr, index) => {\n          index++;\n          if (index % interval === 0) {\n            accu.push(curr);\n          }\n          return accu;\n        };\n        setForecasts(list.reduce(reducer, []));\n      }\n    };\n\n    init();\n  });\n\n  const handleCity = event => {\n    force = true;\n    setCityName(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"visually-hidden\">Forecast</h1>\n\n      <main>\n        <h2 className=\"city\">\n          <input\n            className=\"city__input\"\n            type=\"text\"\n            name=\"city\"\n            value={cityName}\n            onChange={handleCity}\n          />\n        </h2>\n\n        <section className=\"today\">\n          <h3 className=\"visually-hidden\">Today</h3>\n          <p className=\"today__temp\">{today}&deg;</p>\n        </section>\n\n        <section>\n          <h3 className=\"visually-hidden\">5-Day Forecast</h3>\n\n          <div className=\"forecasts\">\n            {forecasts.map(({ main, weather, dt_txt, dt }) => (\n              <Forecast\n                key={dt}\n                datetime={dt_txt}\n                temp={main.temp}\n                icon={weather[0].icon}\n                description={weather[0].description}\n              />\n            ))}\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}